pipeline {
    agent any
    environment
    {
      // NOTE: this file must be executed in a directory whose name is a numeric sequence, and whose parent is named "Releases".
      // This is how other Jenkinsfiles in the Release process determine the current release number.
      RELEASE_VERSION = (pwd() =~ /Releases\/(\d+)\//)[0][1];
    }

    stages
    {
        stage('Checkout')
        {
            steps
            {
                // Get some code from a GitHub repository
                git branch: 'feature/Joomla', url: 'https://github.com/reactome/container.git'
            }
        }
        stage('Download graphdb')
        {
            steps
            {
                fileOperations([fileDownloadOperation(password: '', proxyHost: '', proxyPort: '', targetFileName: "reactome-${env.RELEASE_VERSION}.graphdb.tgz", targetLocation: './neo4j', url: 'https://reactome.org/download/current/reactome.graphdb.tgz', userName: '')])
            }
        }

        stage("Build graphdb")
        {
            steps
            {
                dir("neo4j")
                {
                    script
                    {
                        docker.build("reactome/graphdb:$RELEASE_VERSION --build-arg GRAPHDB_LOCATION=./reactome-${env.RELEASE_VERSION}.graphdb.tgz --build-arg RELEASE_VERSION=${env.RELEASE_VERSION} -f ./neo4j_stand-alone.dockerfile")
                    }
                }
            }
        }
        stage("Generate: solr index and diagrams (also: set up relational db)")
        {
            parallel
            {
                stage("solr-index")
                {
                    steps
                    {
                        dir("solr")
                        {
                            script
                            {
                                docker.build("reactome/solr:${env.RELEASE_VERSION} --build-arg RELEASE_VERSION=${env.RELEASE_VERSION} -f index-builder.dockerfile")
                            }
                        }
                    }
                }
                stage("mysql database and diagram files")
                {
                    steps
                    {
                        dir("mysql")
                        {
                            script
                            {
                                docker.build("reactome/reactome-mysql:${env.RELEASE_VERSION} --build-arg RELEASE_VERSION=${env.RELEASE_VERSION} -f mysql.dockerfile")
                            }
                        }
                        dir("diagram-generator")
                        {
                            script
                            {
                                docker.build("reactome/diagram-generator:${env.RELEASE_VERSION} --build-arg RELEASE_VERSION=${env.RELEASE_VERSION} -f diagram-generator.dockerfile")
                            }
                        }
                    }
                }
            }
        }
        stage ("Build content-service web application")
        {
            steps
            {
                dir("stand-alone-content-service")
                {
                    script
                    {
                        docker.build("reactome/stand-alone-content-service:${env.RELEASE_VERSION} --build-arg RELEASE_VERSION=${env.RELEASE_VERSION} -f content-service.dockerfile")
                    }
                }
            }
        }
    }
}
